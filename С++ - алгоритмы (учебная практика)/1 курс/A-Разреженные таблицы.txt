#include <iostream>
#include <vector>
#include <utility>
using namespace std;
template <typename T>
class my_min {
public:
    const T& operator()(const T& a, const T& b) {
		return (a < b ? a : b);
	}
};

template <typename T, typename Operation = my_min<T> >
class SparseTable {
private:
    const int pow_of_two(int k); 
    const int log(int k);
	Operation Op;
    vector<vector<T> > ST;
    int high; 
    int width;
public:
    template <typename RandAcIt>
    SparseTable(RandAcIt left, RandAcIt right, Operation Op_ );
	const T RMQ(int i, int j);
};

template <typename T, typename Operation>
const int SparseTable<T, Operation>::pow_of_two(int k) {
    return 1 << k;
}

template <typename T, typename Operation>
const int SparseTable<T, Operation>::log(int k) {
    int res = 0;
    while (k) {
        k = k >> 1;
        res++;
    }
    return res - 1;
}

template <typename T, typename Operation>
template <typename RandAcIt>
SparseTable<T, Operation>::SparseTable(RandAcIt left, RandAcIt right, Operation Op_) : Op(Op_), ST(), high(log(right - left) + 1), width(right - left) {
    ST.push_back(vector<int> () );
    for (int i = 0; i < width; ++i)
        ST[0].push_back(*(left + i)); 
	for (int k = 1; k < high; ++k) {
        ST.push_back(vector<int>(width - pow_of_two(k) + 1));
        for (int i = 0; i < (width - pow_of_two(k) + 1); ++i) 
            ST[k][i] = Op(ST[k-1][i], ST[k-1][i + pow_of_two(k-1)]);
    }
}

template <typename T, typename Operation>
const T SparseTable<T, Operation>::RMQ(int i, int j) {
    int k = log(j - i + 1);
    return Op(ST[k][i], ST[k][j - pow_of_two(k)+ 1]);
}

int main() {
    int n, m, a, u, v;
    vector<int> A;
    cin >> n >> m >> a;
	A.push_back(a);
    for (int i = 1; i < n; ++i){
        a = (23 * a + 21563) % 16714589;
        A.push_back(a);
    }
    SparseTable<int> ST(A.begin(), A.end(), my_min<int>());
    cin >> u >> v;
	int ans;
	if (u < v)
		ans = ST.RMQ(u - 1, v - 1);
	else
		ans = ST.RMQ(v - 1, u - 1);
    for (int i = 1; i < m; ++i) {
		u = (17 * u + 751 + ans + 2 * i) % n + 1;
		v = (13 * v + 593 + ans + 5 * i) % n + 1;
		if (u < v)
			ans = ST.RMQ(u - 1, v - 1);
		else
			ans = ST.RMQ(v - 1, u - 1);
    }
	cout << u << ' ' << v << ' ' << ans;
	return 0;
}
