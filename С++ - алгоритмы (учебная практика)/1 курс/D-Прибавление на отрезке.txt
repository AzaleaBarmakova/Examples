#include <iostream> 
#include <vector> 
#include <string> 
#include <algorithm> 

using namespace std; 

class BinaryIndexedTree { 
	vector<long long> BIT; 
	int n; 
public: 
	BinaryIndexedTree() {
		n = 0;
	}
	BinaryIndexedTree(int number) { 
		n = number; 
		BIT.resize(n, 0); 
	} 
	long long sum(int r) { 
		long long result = 0; 
		for (; r >= 0; r = (r & (r + 1)) - 1)  
			result += BIT[r]; 
		return result; 
	} 
	long long sum(int l, int r) { 
		return sum(r) - sum(l - 1); 
	} 
	void update(int r, int add) { 
		for (; r < n; r = (r | (r + 1)))  
			BIT[r] += add;  
	} 
	void print() { 
		for (int i = 0; i < n; i++)  
			cout << BIT[i] << ' '; 
		cout << endl; 
	} 
}; 

int main() { 
	long long N = 0, y = 0, x = 0, d = 0, k = 0, M = 0; 
	char c = 'z'; 
	cin >> N; 
	BinaryIndexedTree tree(N); 
	for (int i = 0; i < N; i++) { 
		cin >> x; 
		y = k; 
		k = x; 
		tree.update(i, k - y); 
	} 
	cin >> M; 
	for (int i = 0; i < M; i++) { 
		cin >> c; 
		if (c == 'a') { 
			cin >> x >> y >> d; 
			tree.update(x - 1, d); 
			tree.update(y, -d); 
		} 
		else { 
			cin >> x; 
			cout << tree.sum(x - 1) << endl; 
		} 
	} 
	return 0; 
}