#include<iostream>
#include<vector>

using namespace std;

template <typename T>
class BinaryIndexedTree {
private:
	vector<T> answers;
	vector<vector<vector<T> > > s;
	int n;
public:
	BinaryIndexedTree() {
		cin >> n;
		s.resize(n, vector<vector<T> >(n, vector<T>(n, 0)));
	}
	~BinaryIndexedTree() {
	}
	void update(int x1, int y1, int z1, T d) {
		for(int i = x1; i < n; i = (i | (i + 1)))
			for(int j = y1; j < n; j = (j | (j + 1)))
				for(int k = z1; k < n; k = (k | (k + 1)))
					s[i][j][k] += d;
	}
	T sum(int x1, int y1, int z1) {
		T result = 0;
		for(int i = x1; i >= 0; i = ((i & (i + 1)) - 1))
			for(int j = y1; j >= 0; j = ((j & (j + 1)) - 1))
				for(int k = z1; k >= 0; k = ((k & (k + 1))- 1))
					result += s[i][j][k];
		return result;
	}
	T answer(int x1, int y1, int z1, int x2, int y2, int z2) {
		T ans = 0;
		if (x1 > 0 && y1 > 0 && z1 > 0 && x2 > 0 && y2 > 0 && z2 > 0)
			ans = sum(x2, y2, z2) - sum(x1 - 1, y2, z2) - sum(x2, y1 - 1, z2) - sum(x2, y2, z1 - 1) + sum(x1 - 1, y1 - 1, z2) + sum(x1 - 1, y2, z1 - 1) + sum(x2, y1 - 1, z1 - 1) - sum(x1 - 1, y1 - 1, z1 - 1);
		else {
			if (x1 <= 0)
				ans = sum(x2, y2, z2) - sum(x2, y1 - 1, z2) - sum(x2, y2, z1 - 1) + sum(x2, y1 - 1, z1 - 1);
			if (y1 <= 0)
				ans = sum(x2, y2, z2) - sum(x1 - 1, y2, z2) - sum(x2, y2, z1 - 1) + sum(x1 - 1, y2, z1 - 1);
			if (z1 <= 0)
				ans = sum(x2, y2, z2) - sum(x1 - 1, y2, z2) - sum(x2, y1 - 1, z2) + sum(x1 - 1, y1 - 1, z2);
			}
		//cout << ans;
		answers.push_back(ans);
		return ans;
	}
	void printAnswer() {
		int n = answers.size();
		for (int i = 0; i < n; ++i)
			cout << answers[i] << endl;
		return;
	}
};
int main() {
	BinaryIndexedTree<long long> bit;
	int p = 0;
	int x1, x2, z1, z2, y1, y2, k;
	while (p != 3){
		cin >> p;
		if (p == 1) {
			cin >> x1 >> y1 >> z1 >> k;
			bit.update(x1, y1, z1, k);
		}
		if (p == 2) {
			cin >> x1 >> y1 >> z1 >> x2 >> y2 >> z2;
			bit.answer(x1, y1, z1, x2, y2, z2);
		}
	}
	bit.printAnswer();
	return 0;
}