#include<iostream>
#include<vector>
#include<queue>

using namespace std;

template <typename InIt, typename InIt_2>
void Relax(InIt lists, InIt_2 d, int u, int indexV) {
	if ((d[u] == 30000) || (lists[u][indexV].second == 30000))
		return;
	if (d[lists[u][indexV].first] > d[u] + lists[u][indexV].second)
		d[lists[u][indexV].first] = d[u] + lists[u][indexV].second;
	return;
}

template <typename InIt> 
//константный  метод выглядит так (const в конце)
vector<int> Bellman_Ford(InIt lists, int n) {
	vector<int> distance(n + 1, 30000);
	distance[1] = 0;
	for (int i = 0; i < n - 1; ++i)
		for (int j = 1; j < n + 1; ++j) {
			int numberEdgeU = lists[j].size();
			for (int k = 0; k < numberEdgeU; ++k)
				Relax(lists, distance.begin(), j, k);
		}
	return distance;
}

int main() {
	int N, M, x, y, weight;
	cin >> N >> M;             
	vector<vector<pair<int, int> > > lists(N + 1, vector<pair<int, int>>(0));
	for (int i = 0; i < M;  ++i) {
		cin >> x >> y >> weight;
		if (x != y) 
			lists[x].push_back(make_pair(y, weight)); // indexing from 1
	}
	vector<int> answer;
	answer = Bellman_Ford(lists.begin(), N);
	for (int i = 1; i < N + 1; ++i) 
			cout << answer[i] << ' ';
	return 0;
}