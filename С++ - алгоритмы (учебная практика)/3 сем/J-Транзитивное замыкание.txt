#include <iostream>
#include <vector>
#include <limits>
using namespace std;
vector<vector<int> > transitive_closure(vector<vector<int> >&matrix) {
    int N = matrix.size();
    int INF = numeric_limits<int>::max();
    vector<vector<int> > D = matrix;
	for(int k = 0; k < N; ++k)
        for(int i = 0; i < N; ++i)
            for(int j = 0; j < N; ++j)
                if (D[i][k] < INF && D[k][j] < INF && D[i][j] > D[i][k] + D[k][j])
                    D[i][j] = D[i][k] + D[k][j];
    vector<vector<int> >trans_closure(N, vector<int>(N));
    for(int i = 0; i < N; ++i)
        for(int j = 0; j < N; ++j)
            if (D[i][j] == INF)
                trans_closure[i][j] = 0;
            else
                trans_closure[i][j] = 1;
    return trans_closure;
}

int main() {
    int INF = numeric_limits<int>::max();
    int N, a;
    cin >> N;
    vector<vector<int> > matrix(N, vector<int>(N));
    for(int i = 0; i < N; ++i)
        for(int j = 0; j < N; ++j) {
            cin >> a;
            if (a == 0)
                matrix[i][j] = INF;
            else
                matrix[i][j] = a;
        }
    vector<vector<int> >trans_closure = transitive_closure(matrix);
    for(int i = 0; i < N; ++i) {
        for(int j = 0; j < N; ++j)
            cout << trans_closure[i][j] << ' ';
        cout << endl;
    }
    return 0;
}

