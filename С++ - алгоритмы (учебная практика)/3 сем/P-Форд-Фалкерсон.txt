#include <iostream>
#include <algorithm>
using namespace std;

const int MaxE = (int) 1e6;
const int MaxV = (int) 501;
const int INF = (int) 1e9;

int numOfVertex, numOfEdge, Start, Finish;
int capacity[MaxE], onEnd[MaxE], nextEdge[MaxE], edgeCount;
int firstEdge[MaxV], visited[MaxV];

void addEdge(int u, int v, int cap) {
	onEnd[edgeCount] = v; 
	nextEdge[edgeCount] = firstEdge[u]; 
	firstEdge[u] = edgeCount;
	capacity[edgeCount++] = cap; 
	onEnd[edgeCount] = u; 
	nextEdge[edgeCount] = firstEdge[v]; 
	firstEdge[v] = edgeCount;  
	capacity[edgeCount++] = 0;
}

int findFlow(int u, int flow) {
	if (u == Finish) return flow; 
	visited[u] = true;
	for (int edge = firstEdge[u]; edge != -1; edge = nextEdge[edge]) {
		int to = onEnd[edge];
		if (!visited[to] && capacity[edge] > 0) {
			int minResult = findFlow(to, min(flow, capacity[edge])); 
			if (minResult > 0) {  
				capacity[edge] -= minResult;  
				capacity[edge ^ 1] += minResult;
				return minResult;
			}
		}
	}
	return 0; 
}

int main() {
	fill(firstEdge, firstEdge + MaxV, -1); 
	cin >> numOfVertex >> numOfEdge; 
	Start = 1;
	Finish = numOfVertex;
	for (int i = 0, u, v, cap; i < numOfEdge; i++) {
		cin >> u >> v >> cap;
		addEdge(u, v, cap);
	}
	int maxFlow = 0;
	int iterationResult = 0;
	while ((iterationResult = findFlow(Start, INF)) > 0) {
		fill(visited, visited + MaxV, false);
		maxFlow += iterationResult;
	}
	cout << maxFlow << endl;
	return 0;
}